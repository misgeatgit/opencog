/*
 * opencog/tests/learning/experimental-pattern-miner/c++-based/XPatternMiner.cxxtest
 *
 * Copyright (C) 2017 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/learning/xpattern-miner/c++-based/HandleTree.h>
#include <opencog/learning/xpattern-miner/c++-based/XPatternMiner.h>
#include <opencog/guile/SchemeEval.h>

#include <vector>

using namespace opencog;
using namespace std;

#define al _as.add_link
#define an _as.add_node
#define tmp_al _tmp_as.add_link
#define tmp_an _tmp_as.add_node

class XPatternMinerUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	AtomSpace _tmp_as;
	SchemeEval _scm;

public:
	XPatternMinerUTest();
	~XPatternMinerUTest();

	void setUp();
	void tearDown();

	// Auxiliary methods
	void test_gen_var_overlap_subpatterns();
	void test_product_compose_1();
	void test_product_compose_2();
	void test_product_compose_3();

	// Pattern miner
	void test_A();
	void test_AB();
	void test_AB_AC();
	void test_AB_AC_BC();
	void test_AB_ABC();
	void test_2gram_1();
	void test_2gram_2();
	void test_InferenceControl();
	// void test_SodaDrinker();
};

XPatternMinerUTest::XPatternMinerUTest() : _scm(&_as)
{
	logger().set_level(Logger::DEBUG);
	// logger().set_timestamp_flag(false);
	logger().set_print_to_stdout_flag(true);
}
XPatternMinerUTest::~XPatternMinerUTest() {}

void XPatternMinerUTest::setUp()
{
	// Configure scheme load-paths that are common for all tests.
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/tests/learning/xpattern-miner/c++-based\")");
}

void XPatternMinerUTest::tearDown()
{
	_as.clear();
	_tmp_as.clear();
}

void XPatternMinerUTest::test_gen_var_overlap_subpatterns()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle X = tmp_an(VARIABLE_NODE, "$X"),
		Y = tmp_an(VARIABLE_NODE, "$Y"),
		Z = tmp_an(VARIABLE_NODE, "$Z"),
		U = tmp_an(VARIABLE_NODE, "$U"),
		V = tmp_an(VARIABLE_NODE, "$V"),
		pattern = tmp_al(LAMBDA_LINK,
		                 tmp_al(VARIABLE_LIST, X, Y, Z),
		                 tmp_al(AND_LINK,
		                        X,
		                        tmp_al(INHERITANCE_LINK, Y, Z))),
		var = X,
		subpat = tmp_al(LAMBDA_LINK,
		                tmp_al(VARIABLE_LIST, U, V),
		                tmp_al(INHERITANCE_LINK, U, V));

	XPatternMiner pm(_as);
	HandleTree results = pm.gen_var_overlap_subpatterns(pattern, var, subpat, -1);
	HandleTree expected
		(tmp_al(LAMBDA_LINK,
		        tmp_al(VARIABLE_LIST, U, V),
		        tmp_al(INHERITANCE_LINK, U, V)),
		 { HandleTree(tmp_al(LAMBDA_LINK,
		                     tmp_al(VARIABLE_LIST, U, Y),
		                     tmp_al(INHERITANCE_LINK, U, Y)),
			          { tmp_al(LAMBDA_LINK,
			                   Y,
			                   tmp_al(INHERITANCE_LINK, Y, Y)),
					    tmp_al(LAMBDA_LINK,
					           tmp_al(VARIABLE_LIST, Z, Y),
					           tmp_al(INHERITANCE_LINK, Z, Y)) }),
		   HandleTree(tmp_al(LAMBDA_LINK,
		                     tmp_al(VARIABLE_LIST, U, Z),
		                     tmp_al(INHERITANCE_LINK, U, Z)),
		              { tmp_al(LAMBDA_LINK,
		                       tmp_al(VARIABLE_LIST, Y, Z),
		                       tmp_al(INHERITANCE_LINK, Y, Z)),
				        tmp_al(LAMBDA_LINK,
				               Z,
				               tmp_al(INHERITANCE_LINK, Z, Z)) }),
		   tmp_al(LAMBDA_LINK,
		          tmp_al(VARIABLE_LIST, Y, V),
		          tmp_al(INHERITANCE_LINK, Y, V)),
		   tmp_al(LAMBDA_LINK,
		          tmp_al(VARIABLE_LIST, Z, V),
		          tmp_al(INHERITANCE_LINK, Z, V)) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_product_compose_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	XPMParameters param(0);
	XPatternMiner pm(_as, param);

	Handle X = _tmp_as.add_node(VARIABLE_NODE, "$X"),
		Y = _tmp_as.add_node(VARIABLE_NODE, "$Y"),
		a = _tmp_as.add_node(CONCEPT_NODE, "a"),
		XY = _tmp_as.add_link(LAMBDA_LINK, _tmp_as.add_link(VARIABLE_LIST, X, Y),
		                      _tmp_as.add_link(INHERITANCE_LINK, X, Y)),
		aY = _tmp_as.add_link(LAMBDA_LINK, Y,
		                      _tmp_as.add_link(INHERITANCE_LINK, a, Y));

	HandleHandleTreeMap var2pats = { {X, HandleTree(a)} };

	const HandleUCounter texts; // it can be empty since minsup is null
	HandleTree results = pm.product_compose(XY, texts, var2pats),
		expected(aY);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_product_compose_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	XPMParameters param(0);
	XPatternMiner pm(_as, param);

	Handle X = _tmp_as.add_node(VARIABLE_NODE, "$X"),
		Y = _tmp_as.add_node(VARIABLE_NODE, "$Y"),
		a = _tmp_as.add_node(CONCEPT_NODE, "a"),
		b = _tmp_as.add_node(CONCEPT_NODE, "b"),
		XY = _tmp_as.add_link(LAMBDA_LINK, _tmp_as.add_link(VARIABLE_LIST, X, Y),
		                      _tmp_as.add_link(INHERITANCE_LINK, X, Y)),
		Xb = _tmp_as.add_link(LAMBDA_LINK, X,
		                      _tmp_as.add_link(INHERITANCE_LINK, X, b)),
		aY = _tmp_as.add_link(LAMBDA_LINK, Y,
		                      _tmp_as.add_link(INHERITANCE_LINK, a, Y)),
		ab = _tmp_as.add_link(INHERITANCE_LINK, a, b);

	HandleHandleTreeMap var2pats = { {X, HandleTree(a)}, {Y, HandleTree(b)} };

	const HandleUCounter texts; // it can be empty since minsup is null
	HandleTree results = pm.product_compose(XY, texts, var2pats),
		expected{Xb, HandleTree(aY, {ab})};

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_product_compose_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	XPMParameters param(0);
	XPatternMiner pm(_as, param);

	Handle X = _tmp_as.add_node(VARIABLE_NODE, "$X"),
		Y = _tmp_as.add_node(VARIABLE_NODE, "$Y"),
		a = _tmp_as.add_node(CONCEPT_NODE, "a"),
		b = _tmp_as.add_node(CONCEPT_NODE, "b"),
		c = _tmp_as.add_node(CONCEPT_NODE, "c"),
		d = _tmp_as.add_node(CONCEPT_NODE, "d"),
		Sac = _tmp_as.add_link(SET_LINK, a, c),
		XY = _tmp_as.add_link(LAMBDA_LINK, _tmp_as.add_link(VARIABLE_LIST, X, Y),
		                      _tmp_as.add_link(INHERITANCE_LINK, X, Y)),
		Xb = _tmp_as.add_link(LAMBDA_LINK, X,
		                      _tmp_as.add_link(INHERITANCE_LINK, X, b)),
		Xd = _tmp_as.add_link(LAMBDA_LINK, X,
		                      _tmp_as.add_link(INHERITANCE_LINK, X, d)),
		aY = _tmp_as.add_link(LAMBDA_LINK, Y,
		                      _tmp_as.add_link(INHERITANCE_LINK, a, Y)),
		ab = _tmp_as.add_link(INHERITANCE_LINK, a, b),
		ad = _tmp_as.add_link(INHERITANCE_LINK, a, d),
		SacY = _tmp_as.add_link(LAMBDA_LINK, Y,
		                        _tmp_as.add_link(INHERITANCE_LINK, Sac, Y)),
		Sacb = _tmp_as.add_link(INHERITANCE_LINK, Sac, b),
		Sacd = _tmp_as.add_link(INHERITANCE_LINK, Sac, d);

	HandleHandleTreeMap var2pats = { {X, HandleTree{a, Sac}},
	                                 {Y, HandleTree{b, d}} };

	const HandleUCounter texts; // it can be empty since minsup is null
	HandleTree results = pm.product_compose(XY, texts, var2pats),
		expected{ Xb,
		          HandleTree(Xd, {ad, Sacd}),
		          HandleTree(aY, {ab, Sacb}),
		          SacY };

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_A()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A");

	XPMParameters param(2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm(),
		expected;

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_AB()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B");

	XPMParameters param(2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm(),
		expected;               // Still return nothing because the
                                // resulting pattern is not a
                                // specialization of the initial
                                // one. This will change once types
                                // are supported

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_AB_AC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		AB = al(INHERITANCE_LINK, A, B),
		AC = al(INHERITANCE_LINK, A, C);

	XPMParameters param(2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();

	Handle X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		XY = al(INHERITANCE_LINK, X, Y),
		AY = al(INHERITANCE_LINK, A, Y);
	HandleTree expected(al(LAMBDA_LINK, al(VARIABLE_LIST, X, Y), XY),
	                    { al(LAMBDA_LINK, Y, AY) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_AB_AC_BC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		AB = al(INHERITANCE_LINK, A, B),
		AC = al(INHERITANCE_LINK, A, C),
		BC = al(INHERITANCE_LINK, B, C);

	XPMParameters param(2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();

	Handle X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		XY = al(INHERITANCE_LINK, X, Y),
		AY = al(INHERITANCE_LINK, A, Y),
		XC = al(INHERITANCE_LINK, X, C);
	HandleTree expected(al(LAMBDA_LINK, al(VARIABLE_LIST, X, Y), XY),
	                    { al(LAMBDA_LINK, Y, AY), al(LAMBDA_LINK, X, XC) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_AB_ABC()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		AB = al(INHERITANCE_LINK, A, B),
		ABC = al(INHERITANCE_LINK, A, al(AND_LINK, B, C));

	XPMParameters param(2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();

	Handle X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		XY = al(INHERITANCE_LINK, X, Y),
		AY = al(INHERITANCE_LINK, A, Y);
	HandleTree expected(al(LAMBDA_LINK, al(VARIABLE_LIST, X, Y), XY),
	                    { al(LAMBDA_LINK, Y, AY) });

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(results, expected));
}

void XPatternMinerUTest::test_2gram_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		AB = al(INHERITANCE_LINK, A, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);

	Handle
		X = tmp_an(VARIABLE_NODE, "$X"),
		Y = tmp_an(VARIABLE_NODE, "$Y"),
		Z = tmp_an(VARIABLE_NODE, "$Z"),
		VXY = tmp_al(VARIABLE_LIST, X, Y),
		VXYZ = tmp_al(VARIABLE_LIST, X, Y, Z);

	XPMParameters param(2, 2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();
	Handle expected_pattern = tmp_al(LAMBDA_LINK,
	                                 VXYZ,
	                                 tmp_al(AND_LINK,
	                                        tmp_al(INHERITANCE_LINK, X, Y),
	                                        tmp_al(INHERITANCE_LINK, Y, Z)));

	logger().info() << "results = " << oc_to_string(results);
	logger().info() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(content_is_in(expected_pattern, results));
}

void XPatternMinerUTest::test_2gram_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle
		A1 = an(CONCEPT_NODE, "A1"),
		A2 = an(CONCEPT_NODE, "A2"),
		B = an(CONCEPT_NODE, "B"),
		C1 = an(CONCEPT_NODE, "C1"),
		C2 = an(CONCEPT_NODE, "C2"),
		A1B = al(INHERITANCE_LINK, A1, B),
		A2B = al(INHERITANCE_LINK, A2, B),
		BC1 = al(INHERITANCE_LINK, B, C1),
		BC2 = al(INHERITANCE_LINK, B, C2);

	Handle
		X = tmp_an(VARIABLE_NODE, "$X"),
		Y = tmp_an(VARIABLE_NODE, "$Y"),
		Z = tmp_an(VARIABLE_NODE, "$Z"),
		VXY = tmp_al(VARIABLE_LIST, X, Y),
		VXYZ = tmp_al(VARIABLE_LIST, X, Y, Z);

	XPMParameters param(4, 2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();
	Handle expected_pattern = tmp_al(LAMBDA_LINK,
	                                 VXYZ,
	                                 tmp_al(AND_LINK,
	                                        tmp_al(INHERITANCE_LINK, X, Y),
	                                        tmp_al(INHERITANCE_LINK, Y, Z)));

	logger().info() << "results = " << oc_to_string(results);
	logger().info() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(content_is_in(expected_pattern, results));
}

void XPatternMinerUTest::test_InferenceControl()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Load inference-control-corpus.scm
	std::string rs =
		_scm.eval("(load-from-path \"inference-control-corpus.scm\")");

	std::cout << "rs = " << rs << std::endl;

	// Run the pattern miner
	Handle expand = tmp_an(SCHEMA_NODE, "URE:BC:expand-and-BIT"),
		preproof = tmp_an(PREDICATE_NODE, "URE:BC:preproof-of"),
		rule = tmp_an(DEFINED_SCHEMA_NODE,
		              "conditional-full-instantiation-implication-scope-meta-rule"),
		de_rule = tmp_al(DONT_EXEC_LINK, rule),
		T = tmp_an(VARIABLE_NODE, "$T"),
		A = tmp_an(VARIABLE_NODE, "$A"),
		L = tmp_an(VARIABLE_NODE, "$L"),
		B = tmp_an(VARIABLE_NODE, "$B"),
		vardecl = tmp_al(VARIABLE_LIST, T, A, L, B),
		clauses = tmp_al(AND_LINK,
		                 tmp_al(EXECUTION_LINK,
		                        expand,
		                        tmp_al(LIST_LINK, A, L, de_rule),
		                        B),
		                 tmp_al(EVALUATION_LINK,
		                        preproof,
		                        tmp_al(LIST_LINK, A, T)),
		                 tmp_al(EVALUATION_LINK,
		                        preproof,
		                        tmp_al(LIST_LINK, B, T))),
		initpat = tmp_al(LAMBDA_LINK, vardecl, clauses);

	XPMParameters param(2, 3, initpat, 2);
	XPatternMiner pm(_as, param);
	HandleTree results = pm();

	// The main pattern of interest should look like
	//
	// Execution
	//   Schema "expand"
	//   List
	//     Variable "$A"
	//     Inheritance
	//       ConceptNode "a"
	//       PatternMiningVariable "$X"
	//     GroundedSchemaNode "scm: conditional-full-instantiation-scope-formula"
	//   Variable "$B"
	//
	// Evaluation
	//   Predicate "preproof
	//   Variable "$A"
	//
	// Evaluation
	//   Predicate "preproof
	//   Variable "$B"
	Handle a = tmp_an(CONCEPT_NODE, "a"),
		X = tmp_an(VARIABLE_NODE, "$X"),
		expected_vardecl = tmp_al(VARIABLE_LIST, T, A, X, B),
		expected_clauses = tmp_al(AND_LINK,
		                          tmp_al(EXECUTION_LINK,
		                                 expand,
		                                 tmp_al(LIST_LINK,
		                                        A,
		                                        tmp_al(INHERITANCE_LINK, a, X),
		                                        de_rule),
		                                 B),
		                          tmp_al(EVALUATION_LINK,
		                                 preproof,
		                                 tmp_al(LIST_LINK, A, T)),
		                          tmp_al(EVALUATION_LINK,
		                                 preproof,
		                                 tmp_al(LIST_LINK, B, T))),
		expected_pattern = tmp_al(LAMBDA_LINK,
		                          expected_vardecl,
		                          expected_clauses);

	logger().info() << "results = " << oc_to_string(results);
	logger().info() << "expected_pattern = " << oc_to_string(expected_pattern);

	TS_ASSERT(content_is_in(expected_pattern, results));
}

// void XPatternMinerUTest::test_PatternMiner_SodaDrinker()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);
// 	// Load ugly_male_soda-drinker_corpus.scm
// 	_scm.eval("(load-from-path \"ugly_male_soda-drinker_corpus.scm\")");

// 	// Run the pattern miner
// 	PatternMiner pm(_as);
// 	pm.runPatternMiner(false);

// 	// Test the result: check the final top 3-gram pattern

// 	vector<HTreeNode*>& top3gramPatterns = pm.getFinalPatternsForGram(3);

// 	string patternStr = pm.unifiedPatternToKeyString(top3gramPatterns[0]->pattern);
// 	logger().info("The result top 3-gram pattern: \n%s", patternStr.c_str());

// 	if (patternStr != top3gramPatternStr)
// 	{
// 		logger().info("Failed: The result top 3-gram pattern is wrong! The right one should be:\n%s", top3gramPatternStr.c_str());
// 		TS_FAIL("The result top 3-gram pattern is wrong!");
// 	}

// 	if (top3gramPatterns[0]->count != 5)
// 	{
// 		logger().info("Failed: The result top 3-gram pattern count is wrong!");
// 		TS_FAIL("The result top 3-gram pattern count is wrong!");
// 	}

// 	logger().info("End TEST: %s", __FUNCTION__);
// }

#undef al
#undef an
#undef tmp_al
#undef tmp_an
