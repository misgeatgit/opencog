/*
 * OpenPsiImplicatorUTest.cxxtest
 *
 * Copyright (C) 2017 MindCloud
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/openpsi/OpenPsiImplicator.h>
#include <opencog/openpsi/OpenPsiRules.h>

#define OPENPSI_TEST_PATH PROJECT_SOURCE_DIR "/tests/openpsi"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

using namespace opencog;

class OpenPsiImplicatorUTest : public CxxTest::TestSuite
{
private:
  AtomSpace* _as;
  SchemeEval* _scm;
  OpenPsiImplicator* _opi;

public:
  OpenPsiImplicatorUTest(): _as(nullptr), _scm(nullptr), _opi(nullptr)
  {
    logger().set_level(Logger::DEBUG);
    logger().set_print_level_flag(true);
    logger().set_print_to_stdout_flag(true);
  }

  ~OpenPsiImplicatorUTest()
  {
    // Clean Up
    tearDown();

    // Erase the log file if no assertions failed
    if(!CxxTest::TestTracker::tracker().suiteFailed())
        std::remove(logger().get_filename().c_str());
  }

  void setUp()
  {
    // The scheme environment is reset between each test.
    _as = new AtomSpace();
    _scm = new SchemeEval(_as);
    _opi = new OpenPsiImplicator(_as);

    // Configure scheme load-paths that are common for all tests.
    _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
    CHKERR

    // Load require modules to be tested and populate the atomspace
    _scm->eval("(use-modules (opencog))");
    CHKERR
  }

  void tearDown()
  {
    delete _as;
    _as = nullptr;
    delete _scm;
    _scm = nullptr;

    // Reset the cache between each test.
    _opi->_satisfiability_cache = {};
    // OpenPsiImplicator::_satisfiability_cache = {};
    delete _opi;
    _opi = nullptr;
  }

  void test_check_satisfiability()
  {
    logger().info("BEGIN TEST: %s", __FUNCTION__);

    // Common Setup
    TruthValuePtr tv;
    _scm->eval("(load \"" OPENPSI_TEST_PATH "/psi-implicator.scm\")");
    CHKERR
    Handle rule_1 = _scm->eval_h("(rule-1)");
    CHKERR
    PatternLinkPtr query_1 =  OpenPsiRules::get_query(rule_1);
    Handle query_body_1 = query_1->get_pattern().body;
    // A Ghost rule.
    Handle rule_2 = _scm->eval_h("(rule-2)");
    CHKERR
    PatternLinkPtr query_2 =  OpenPsiRules::get_query(rule_2);
    Handle query_body_2 = query_2->get_pattern().body;

    // Test 1:
    // Test when there is no grounding.
    tv = _opi->check_satisfiability(rule_1);
    TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), tv);
    TS_ASSERT_EQUALS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_1));

    tv = _opi->check_satisfiability(rule_2);
    TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), tv);
    TS_ASSERT_EQUALS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_2));

    // Test 2:
    // Test when there is an alpha-equivalent pattern.
    _scm->eval("(context-1-alpha-equivalent)");
    CHKERR
    tv = _opi->check_satisfiability(rule_1);
    TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), tv);
    TS_ASSERT_EQUALS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_1));

    tv = _opi->check_satisfiability(rule_2);
    TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), tv);
    TS_ASSERT_EQUALS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_2));

    // Test 3:
    // Test when there is a grounding.
    _scm->eval("(groundable-content-1)");
    CHKERR
    tv = _opi->check_satisfiability(rule_1);
    TSM_ASSERT_EQUALS("Expected (stv 1 1)", TruthValue::TRUE_TV(), tv);
    TS_ASSERT_DIFFERS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_1));

    tv = _opi->check_satisfiability(rule_2);
    TSM_ASSERT_EQUALS("Expected (stv 1 1)", TruthValue::TRUE_TV(), tv);
    TS_ASSERT_DIFFERS(_opi->_EMPTY_HANDLE_MAP,
      _opi->_satisfiability_cache.at(query_body_2));

    logger().info("END TEST: %s", __FUNCTION__);
  }

  void test_imply()
  {
    logger().info("BEGIN TEST: %s", __FUNCTION__);

    // Common Setup
    _scm->eval("(load \"" OPENPSI_TEST_PATH "/psi-implicator.scm\")");
    CHKERR
    Handle expected_result = _scm->eval_h("(test_imply_solution)");
    CHKERR
    Handle rule_1 = _scm->eval_h("(groundable-content-1) (rule-1)");
    CHKERR
    // A Ghost rule.
    Handle rule_2 = _scm->eval_h("(rule-2)");
    CHKERR

    // Test 1:
    // Test when satisfiablity hasn't been checked.
    TS_ASSERT_THROWS(_opi->imply(rule_1), RuntimeException);
    TS_ASSERT_THROWS(_opi->imply(rule_2), RuntimeException);

    // Test 2:
    // Test when satisfiablity has been checked.
    _opi->check_satisfiability(rule_1);
    Handle result_2_1 = _opi->imply(rule_1);
    TSM_ASSERT_EQUALS("Expected grounded InheritanceLink",
      expected_result, result_2_1);

    _opi->check_satisfiability(rule_2);
    Handle result_2_2 = _opi->imply(rule_2);
    TSM_ASSERT_EQUALS("Expected grounded InheritanceLink",
      expected_result, result_2_2);

    logger().info("END TEST: %s", __FUNCTION__);
  }
};
