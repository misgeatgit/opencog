/*
 * @file tests/planning/OpenPsiUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/truthvalue/TruthValue.h>

using namespace opencog;

#define OPENPSI_TEST_PATH PROJECT_SOURCE_DIR "/tests/openpsi"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class OpenPsiSCMUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;

public:
    OpenPsiSCMUTest(): _as(nullptr), _scm(nullptr)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~OpenPsiSCMUTest()
    {
        // Clean Up
        delete _as;
        _as = nullptr;
        delete _scm;
        _scm = nullptr;

        // Erase the log file if no assertions failed
        if(!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        // Configure scheme load-paths that are common for all tests.
        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR

        // Load required modules for testing and populate the atomspace
        _scm->eval("(use-modules (opencog) (opencog openpsi))");
        CHKERR
        _scm->eval("(load \"" OPENPSI_TEST_PATH "/rules.scm\")");
        CHKERR
    }

    void tearDown()
    {
        delete _as;
        _as = nullptr;
        delete _scm;
        _scm = nullptr;
    }

    // Check the scheme function `psi-get-action`
    void test_psi_get_action()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // For single atomspace
        auto result_1 = _scm->eval("(test_psi_get_action_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-context`
    void test_psi_get_context()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // For single atomspace
        auto result_1 = _scm->eval("(test_psi_get_context_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-goal`
    void test_psi_get_goal()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // For single atomspace
        auto result_1 = _scm->eval("(test_psi_get_goal_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-satisfiable?`
    // NOTE: The name of the test function uses `__predicate` in place of `?`
    void test_psi_satisfiable__predicate()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // Test unsatisfaiability
        auto result_1_1 = _scm->eval_tv("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 0 1)", TruthValue::FALSE_TV(), result_1_1);

        // Test 2:
        // Test satisfaiability
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = _scm->eval_tv("(psi-satisfiable? (rule-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected (stv 1 1)", TruthValue::TRUE_TV(), result_2_1);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-select-rules`
    void xtest_psi_select_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        auto rule_1 = _scm->eval_h("(rule-1)");
        CHKERR
        auto rule_2 = _scm->eval_h("(rule-2)");
        CHKERR

        // Test 1:
        auto result_1 = _scm->eval("(psi-select-rules)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1);

        // Test 2:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", "1\n" , result_2_1);

        auto result_2_2 = _scm->eval_h("(car (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected the same psi-rule", rule_1, result_2_2);
        CHKERR

        // Test 3:
        // Test that only one rule is selected when running in default mode,
        // eventhough multiple rules are satisfiable.
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_3 = _scm->eval("(length (psi-select-rules))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", "1\n" , result_3);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-select-rules`
    void test_psi_select_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        auto rule_1 = _scm->eval_h("(rule-1)");
        CHKERR
        auto rule_2 = _scm->eval_h("(rule-2)");
        CHKERR

        // Test 1:
        auto result_1_1 = _scm->eval("(psi-select-rules (demand-1))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_1);

        auto result_1_2 = _scm->eval("(psi-select-rules (demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_1_2);

        // Test 2:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_2_1 = \
            _scm->eval_h("(car (psi-select-rules (demand-1)))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_1 , result_2_1);

        auto result_2_2 = _scm->eval("(psi-select-rules (demand-2))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected ()", "()\n", result_2_2);
        CHKERR

        // Test 3:
        // Double checking
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_3_1 = \
            _scm->eval_h("(car (psi-select-rules (demand-1)))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_1 , result_3_1);

        auto result_3_2 = \
            _scm->eval_h("(car (psi-select-rules (demand-2)))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected a single rule", rule_2 , result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-related-goals`
    void xtest_psi_related_goals()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules
        _scm->eval_h("(rule-1) (rule-2) (rule-3)");
        CHKERR

        // Test 1:
        auto result_1 = _scm->eval("(test_psi_related_goals_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1);

        // Test 2:
        auto result_2 = _scm->eval("(test_psi_related_goals_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-satisfiable-rules`
    void test_psi_get_satisfiable_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Add the rules and contents
        _scm->eval_h("(rule-1) (rule-2) (rule-3)");
        CHKERR

        // Test 1:
        _scm->eval("(groundable-content-1)");
        CHKERR
        auto result_1_1 = _scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-1))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_1_1);
        auto result_1_2 =_scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-2))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `0`", "0\n" , result_1_2);

        // Test 2:
        _scm->eval("(groundable-content-2)");
        CHKERR
        auto result_2_1 = _scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-1))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `2`", "2\n" , result_2_1);
        auto result_2_2 =_scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-2))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_2_2);

        // Test 3:
        _scm->eval("(map cog-delete (groundable-content-1))");
        CHKERR
        auto result_3_1 = _scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-1))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_3_1);
        auto result_3_2 =_scm->eval("(length (cog-outgoing-set \
                            (psi-get-satisfiable-rules (demand-2))))");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `1`", "1\n" , result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }


    // Check the scheme function `psi-step`.
    void test_psi_step_1()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Common Setup
        _scm->eval("(rule-1) (rule-2)");
        CHKERR

        // Test 1:
        // Test that actions are not evaluated when the contexts are not
        // satisfied.
        _scm->eval("(do_psi_step)");
        CHKERR

        auto result_1_1 = _scm->eval("(act-1-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#f\n", result_1_1);

        auto result_1_2 = _scm->eval("(act-2-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#f\n", result_1_2);

        // Test 2:
        // Test that action-1 is executed and action-2 is not when its
        // context is satisfied.
        _scm->eval("(groundable-content-1)");
        CHKERR
        _scm->eval("(do_psi_step)");
        CHKERR

        // For rule-1
        auto result_2_1 = _scm->eval("(act-1-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#t\n", result_2_1);

        // For rule-2
        auto result_2_2 = _scm->eval("(act-2-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#f\n", result_2_2);

        // Test 3:
        // Test that action-2, goal-1 and goal-2 are evaluated.
        _scm->eval("(groundable-content-2)");
        CHKERR
        _scm->eval("(do_psi_step)");
        CHKERR

        // For rule-1
        auto result_3_1 = _scm->eval("(act-1-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#t\n", result_3_1);

        // For rule-2
        auto result_3_2 = _scm->eval("(act-2-present?)");
        CHKERR
        TS_ASSERT_EQUALS("#t\n", result_3_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme functions `psi-run` and `psi-halt`
    void test_psi_run_and_psi_halt()
    {
      logger().info("BEGIN TEST: %s", __FUNCTION__);

      // Common Setup
      _scm->eval("(define d1 (demand-1))");
      CHKERR
      _scm->eval("(define d2 (demand-2))");
      CHKERR

      // Tests
      auto result_1 = _scm->eval("(test-psi-run)");
      CHKERR
      TS_ASSERT_EQUALS("#t\n", result_1);

      auto result_2 = _scm->eval("(test-psi-halt)");
      CHKERR
      TS_ASSERT_EQUALS("#t\n", result_2);
      // Restart the loops
      auto result_3 = _scm->eval("(test-psi-run)");
      CHKERR
      TS_ASSERT_EQUALS("#t\n", result_1);

      auto result_4 = _scm->eval("(test-psi-halt)");
      CHKERR
      TS_ASSERT_EQUALS("#t\n", result_2);

      logger().info("END TEST: %s", __FUNCTION__);
    }

    // Check the scheme function `psi-get-dual-rules`
    // NOTE: The function `psi-get-dual-rules` has been removed but something
    // similar will be added. This test is not removed as the test may come in
    // handy.
    void psi_get_dual_rules()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Test 1:
        // Test for finding psi-rules with context without variable in them,
        // aka canned rules.
        _scm->eval_h("(rule-1)(rule-2)(rule-3)(rule-4)");
        CHKERR
        auto result_1_1 = _scm->eval("(test_psi_get_dual_rules_1_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1_1);
        auto result_1_2 = _scm->eval("(test_psi_get_dual_rules_1_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_1_2);

        // Test 2:
        // Test for finding psi-rules using DualLink for contexts that have
        // variables in them.
        _scm->eval_h("(rule-5)");
        CHKERR
        auto result_2_1 = _scm->eval("(test_psi_get_dual_rules_2_1)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `2`", "2\n" , result_2_1);
        auto result_2_2 = _scm->eval("(test_psi_get_dual_rules_2_2)");
        CHKERR
        TSM_ASSERT_EQUALS("Expected `#t`", "#t\n" , result_2_2);

        logger().info("END TEST: %s", __FUNCTION__);
    }
};
