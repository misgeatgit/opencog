#include <opencog/reasoning/RuleEngine/rule-engine-src/JsonicControlPolicyLoader.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>

using namespace opencog;
//#define DEBUG 1
class JsonicControlPolicyLoaderUTest: public CxxTest::TestSuite {
private:
	AtomSpace * as_;
	JsonicControlPolicyLoader* jcpl;
public:
	JsonicControlPolicyLoaderUTest() {
		server(CogServer::createInstance);
		as_ = &cogserver().getAtomSpace();
		jcpl = new JsonicControlPolicyLoader(as_, "cpolicy-config-test.json");
	}
	void setUp();
	void tearDown();
	void test_load_config();

};

void JsonicControlPolicyLoaderUTest::setUp() {
	jcpl->load_config();
}
void JsonicControlPolicyLoaderUTest::tearDown() {

}
void JsonicControlPolicyLoaderUTest::test_load_config() {
	auto rules = jcpl->get_rules();
	TS_ASSERT_EQUALS(7, rules.size());
	for (Rule * r : rules) {
		if (r->get_name() == "pln-rule-modus-ponens")
			TS_ASSERT_EQUALS(r->get_mutex_rules().size(), 2);
	}
	TS_ASSERT_EQUALS(false,jcpl->get_attention_alloc());
	TS_ASSERT_EQUALS(20,jcpl->get_max_iter());
}
